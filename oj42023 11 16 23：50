#include<stdio.h>
#pragma warning(disable:4996)
int main()
{
	int n, m;
	long long int quesun[101], mubiao[101];
	long long int i, j = 0, qs = 0;//记录缺损点
	long long int k = 0, mb = 0;//记录目标点
	long long int hang[150];
	long long int end[150], begin[150];
	long long int sumqs[150] = { 0 }, summb[150] = { 0 };//一行有多少个缺损点,目标点//
	long long int t = 0, s = 0, u = 0,wzshu=0,wzshu1=0;//用于循环输出//
	long long int qsweizhi[101],mbweizhi[101];//记录缺损点的位置和目标点位置//
	long long int weizhi;
	long long int zhan[150];//构建一个栈用于输出//
	long long int qsshu[150][100] = { 0 };
	scanf("%d%d", &n, &m);
	for (i = 0; i < n; i++)
		scanf("%lld", &quesun[i]);
	for (i = 0; i < m; i++)
		scanf("%lld", &mubiao[i]);
	begin[0] = 1; end[0] = 1; hang[0] = 1; sumqs[0] = 0;
	if (mubiao[0] == 1)
	{
		printf("1\n");
		mb += 1;
	}
	if (quesun[0] == 1)
	{
		if (mb == 0)
			for (i = 0; i < m; i++)
				printf("0\n");
		else {
			for (i = 1; i < m; i++)
				printf("0\n");
		}
	}
	else
	{
		for (i = 1; i < 133; i++)//构造一个最大133行的树//
		{
			begin[i] = end[i - 1] + 1;//起始数//
			hang[i] = (hang[i - 1] - sumqs[i - 1]) * 2;//行总元素数//
			end[i] = begin[i] + hang[i] - 1;//末位数//
			for (j = qs; j < n; j++)
			{
				if (quesun[j] <= end[i] && quesun[j] >= begin[i])
				{
					qsshu[i][sumqs[i]] = quesun[j] - begin[i];//记录第i行第qs个缺损点//	
					sumqs[i] += 1;					
					qsweizhi[qs] = quesun[j] - begin[i];//记录第x个缺损点在当行的位置
					qs += 1;//记录找到了第几个缺损点//			
				}
				else
					break;
			}//找缺损点的函数//
			for (k = mb; k < m; k++)
			{
				if (mubiao[k] <= end[i] && mubiao[k] >= begin[i])
				{
					summb[i] += 1;
					mb += 1;
					mbweizhi[k] = mubiao[k] - begin[i];//记录目标点的位置//
					weizhi = mbweizhi[k];
					zhan[i] = begin[i] + weizhi;
					for (t = i - 1; t >= 0; t--)
					{
						weizhi = (zhan[t + 1] - begin[t + 1]) / 2 + 1;
						//以下去找第weizhi个不是缺损点的数//
						u = 0;
						if (sumqs[t] == 0)
							zhan[t] = begin[t] + weizhi - 1;
						else
						{
							//这一行第n个不是缺损点的数//
							for (u = 0; u < sumqs[t]; u++)
							{
								if (qsshu[t][u] < weizhi)
								{
									weizhi += 1;
								}
								else
									break;
							}
							zhan[t] = begin[t] + weizhi - 1;
						}
					}
					for (t = 0; t <= i; t++)
						printf("%lld ", zhan[t]);
					printf("\n");
				}
				else
					break;
			}//找目标点并输出的函数//	
			if (sumqs[i] == (end[i] - begin[i]+1))
			{
				for (u = mb; u < m; u++)
					printf("0\n");
				break;
			}
		}
	}

	return 0;
}
